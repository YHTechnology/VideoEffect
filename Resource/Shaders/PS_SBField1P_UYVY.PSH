// x:  SourceBuffer第一行的Y坐标
// y:  最终位置Y的奇偶，0－偶数，1－奇数
// z:  奇偶场选择 0- 要奇场信息 1－ 要偶场信息
// 1.0 /texture height
float4     Argus         :register (c0);   
float2     TexSize       :register (c1); //纹理的大小
float4     auxValues     :register (c2);
float      gAlpha        :register (c3);
// x:0.5/texturewidth
// y:0.5/texturheight
// z:2.0 /texturewidth
// w:1.0 /texturewidth
sampler2D  Texture_S     :register (s0); 
struct P_OUT
{
   float4 oColor : COLOR0;//Color 
};
#include "colorspacefunc.inc"
P_OUT main( float2 texUV: TEXCOORD0 ):COLOR
{
    P_OUT retColor;  
 
    float DivV       = Argus.w;  
    int   iy         = texUV.y * TexSize.y - Argus.x;
    int   fetchy     = 0;    
   if(Argus.y == 0)
   {
     if(Argus.z == 0)//最终位置是偶数，源Buffer的奇偶关系不变
     {
       fetchy = 2*iy;
     }
     else
     {
       fetchy = 2*iy +1;
     }
   }
   else // Argus.y == 1
   {
       if(Argus.z == 0) 
     {
       fetchy = 2*iy +1;
     }
     else
     {
        fetchy = 2*iy;
     }
   }   

   float2  uv_YU,uv_YV;      
   int  x    = floor( TexSize.x * texUV.x );  
   //计算出正确的U坐标
   uv_YU.x   =  x * auxValues.z  + auxValues.x;
   uv_YV.x   =  x * auxValues.z  + auxValues.w + auxValues.x;    
   //计算出正确的V坐标
   uv_YV.y   = uv_YU.y  = (fetchy + Argus.x) / TexSize.y + auxValues.y;    
   float4 s1  = tex2D( Texture_S,uv_YU )*gAlpha;
   s1.rgb    *= s1.a;
   float4 s2  = tex2D( Texture_S,uv_YV )*gAlpha;
   s2.rgb    *= s2.a;     
   float3 YU = mul( matRGBA2YUVA, s1.rgb); 
   float3 YV = mul( matRGBA2YUVA, s2.rgb); 
   retColor.oColor =  float4( YU.z,YV.x,YU.y,YU.x )+float4( 0.5, 0.0625, 0.5,0.0625 ); 
   return retColor;
}