float4     Argus0        :register (c0);
float4     Argus1        :register (c1);   
float4     Argus2        :register (c2);
      
sampler    tx_R          :register (s0);      
sampler    tx_G          :register (s1);      
sampler    tx_B          :register (s2);

struct P_OUT
{
   float4 oColor0: COLOR0;//奇场
   float4 oColor1: COLOR1;//偶场
};

P_OUT main( float2 texUV: TEXCOORD0 )
{
   P_OUT outColor;
   outColor.oColor0 = 0.0;  outColor.oColor1 = 0.0;
   float3 retColorO,retColorE;
   float3 yuvOdd    = float3(0,0,0);
   float3 yuvEven   = float3(0,0,0);
   float2 ofUV      = 0.5/Argus0.zw;

   int2   posXY     = texUV * Argus0.zw - Argus0.xy;//当前点的像素坐标(相对)
   int2   posXYOdd  = posXY; int2   posXYEven = posXY;
   posXYOdd.y       = posXYOdd.y*2 + 0;
   posXYEven.y      = posXYOdd.y + 1;
   float2 fetchOdd  = (posXYOdd  + Argus0.xy) / Argus0.zw + ofUV;
   float2 fetchEven = (posXYEven + Argus0.xy) / Argus0.zw + ofUV;   
   float4 R_Odd     = tex2D( tx_R,fetchOdd );  
   float4 R_Even    = tex2D( tx_R,fetchEven ); 
   float4 G_Odd     = tex2D( tx_G,fetchOdd );  
   float4 G_Even    = tex2D( tx_G,fetchEven ); 
   float4 B_Odd     = tex2D( tx_B,fetchOdd );  
   float4 B_Even    = tex2D( tx_B,fetchEven );       
   outColor.oColor0 = float4(R_Odd.x,G_Odd.x,B_Odd.x,1.0);
   outColor.oColor1 = float4(R_Even.x,G_Even.x,B_Even.x,1.0);

  return outColor;
}