// x:  SourceBuffer第一行的Y坐标
// y:  最终位置Y的奇偶，0－偶数，1－奇数
// z:  奇偶场选择 0- 要奇场信息 1－ 要偶场信息
// 1.0 /texture height
float4     Argus         :register (c0);   
float2     TexSize       :register (c1); //纹理的大小
float4     auxValues     :register (c2);
float      gAlpha        :register (c3);
// x:0.5/texturewidth
// y:0.5/texturheight
// z:2.0 /texturewidth
// w:1.0 /texturewidth
sampler2D  Texture_S     :register (s0); 
struct P_OUT
{
   float4 oColor : COLOR0;//Color 
};
P_OUT main( float2 texUV: TEXCOORD0 ):COLOR
{
    P_OUT retColor;  
    float DivV       = Argus.w;  
    int   iy         = texUV.y * TexSize.y  - Argus.x;
    int   fetchy     = 0;    
    
     if(Argus.z == 0)//最终位置是偶数，源Buffer的奇偶关系不变
     {
       fetchy = 2*iy;
     }
     else
     {
       fetchy = 2*iy+1;
     }

   float2  uv = texUV;            
   uv.y = (fetchy + Argus.x) / TexSize.y + auxValues.y;    
   float4 s1  = tex2D( Texture_S,uv )*gAlpha;   
   retColor.oColor  = float4(s1.rgb*s1.a,s1.a);
   return retColor;
}