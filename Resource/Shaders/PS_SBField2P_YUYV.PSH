// x:  SourceBuffer第一行的Y坐标
// y:  最终位置Y的奇偶，0－偶数，1－奇数
// z:  奇偶场选择 0- 要奇场信息 1－ 要偶场信息
// 1.0 /texture height
float4     Argus         :register (c0);   
float4     TexSize       :register (c1); //x,y纹理的大小.z ,w Source左上角UV坐标
float4     auxValues     :register (c2);
float      gAlpha        :register (c3);
float4	   vMisc		 :register (c4);

#define PARTICLEBLEND	vMisc.x
#define CGBLENEED		vMisc.y
#define SPLITTED		vMisc.z //True 已拆场 False No

//bool       bIsParticleBlend:register (c4);
//bool       bCGBlended      :register(c5);
// x:0.5/texturewidth
// y:0.5/texturheight
// z:2.0 /texturewidth
// w:1.0 /texturewidth
sampler2D  Texture_S     :register (s0); 
struct P_OUT
{
   float4 oColor : COLOR0;//Color
   float4 oAlpha : COLOR1;//Alpha
};
#include "ColorSpaceFunc.INC"
P_OUT main( float2 texUV: TEXCOORD0 ):COLOR
{
    P_OUT retColor;  
 
    const float4 coloff =  CS_YUYV_OFFSET;//YUYV
    float DivV       = Argus.w;  
    int   iy         = texUV.y * TexSize.y - Argus.x;
    int   fetchy     = 0;    
     if(any(SPLITTED))
		fetchy = iy;
     if(Argus.z == 0)//最终位置是偶数，源Buffer的奇偶关系不变
     {
       fetchy = 2*iy;
     }
     else
     {
       fetchy = 2*iy +1;
     } 

   float2  uv_YU,uv_YV;      
   int  x    = floor( TexSize.x* (texUV.x - TexSize.z ));  
   //计算出正确的U坐标
   uv_YU.x   =  x * auxValues.z  + auxValues.x + TexSize.z;
   uv_YV.x   =  x * auxValues.z  + auxValues.w + auxValues.x+ TexSize.z; 
   //计算出正确的V坐标
   uv_YV.y   = uv_YU.y  = (fetchy + Argus.x) / TexSize.y + auxValues.y; 
   
   float4 s1  = tex2D( Texture_S,uv_YU );
   float a1   = gAlpha*s1.a;
   s1.rgb     = PARTICLEBLEND?s1.rgb*gAlpha:s1.rgb*gAlpha*s1.a;
   s1.a       = a1;
   float4 s2  = tex2D( Texture_S,uv_YV )*gAlpha;
   float a2   = gAlpha*s2.a;
   s2.rgb     = (PARTICLEBLEND||CGBLENEED)?s2.rgb*gAlpha:s2.rgb*gAlpha*s2.a;
   s2.a       = a2;
 
   ColorSpace_RGBAToYUYU_AAAA( s1, s2, retColor.oColor, retColor.oAlpha ); 
   retColor.oColor +=  CS_YUYV_OFFSET;    
   return retColor;
}