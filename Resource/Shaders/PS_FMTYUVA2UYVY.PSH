//将YUVA 纹理拼接成 YUYV伪１６纹理
sampler2D  Texture_YV     :register (s0);
float4     vSizeTexture   :register (c0);
//x:纹理宽  
//y:1/vSize.x z:0.5/vSize.x w:2/vSize.x
float4 main( float2 texUV0: TEXCOORD0 ): COLOR
{
    float3x3 RGB2YUVMatrix = 
  { 
	    0.256788,   0.504129,     0.097906,
	   -0.148223,  -0.290993,       0.439216,
        0.439216,  -0.367788,      -0.071427,        
  };
  
  float2 uv_YU = texUV0;  float2 uv_YV = texUV0; 
  int  x  = floor(vSizeTexture.x * texUV0.x);  
  //uv_YU.x = (2 * x +0.5)/vSizeTexture.x;
  //uv_YV.x = (2 * x + 1+0.5)/vSizeTexture.x;  
  
  uv_YU.x   =  x * vSizeTexture.w + vSizeTexture.z;
  uv_YV.x   = x * vSizeTexture.w + vSizeTexture.z+vSizeTexture.y;  
  //uv_YU.x   = texUV0.x * 2.0;
  //uv_YV.x   = texUV0.x * 2.0 + vSizeTexture.y ;  
  float t;
  float3 s1 = tex2D( Texture_YV,uv_YU );
  float3 s2 = tex2D( Texture_YV,uv_YV );
  //float3 s1 = tex2D( Texture_YV,uv_YU );t = s1.r;s1.r = s1.b;s1.b = t;
  //float3 s2 = tex2D( Texture_YV,uv_YV );t = s2.r;s1.r = s2.b;s2.b = t;
  
  float3 YU = mul( RGB2YUVMatrix, s1); 
  float3 YV = mul( RGB2YUVMatrix, s2); 
  YU.xyz    += float3(0.062, 0.5,0.5);
  YV.xyz    += float3(0.062, 0.5,0.5);   
  
  return float4(YU.y,YV.x,YU.z,YU.x);  
  
}