#include "..\shaders\ColorSpaceFunc.INC"

sampler2D samColor0    :register(s0);
sampler2D samAlpha0    :register(s1);
sampler2D samColor1    :register(s2);
sampler2D samAlpha1    :register(s3);
float4  bAlphaExisted:register(c0);
float4  bAlphaValue  :register(c1);
float2  fBlendValues :register(c2);
bool    bCGBlended   :register(c3);
struct P_OUT
{
   float4 oColor : COLOR0;//Color
   float4 oAlpha : COLOR1;//Alpha
};

P_OUT main( float2 texCoord:TEXCOORD0 )
{
   P_OUT retColor;   
   float4 sAlpha0 = bAlphaExisted[0]?tex2D(samAlpha0,texCoord)*bAlphaValue[0]:bAlphaValue[0];
   float4 sColor0 = tex2D(samColor0,texCoord)-CS_YUYV_OFFSET;
   sColor0       = sAlpha0*sColor0*fBlendValues[0];  
   
   float4 sAlpha1 = bAlphaExisted[1]?tex2D(samAlpha1,texCoord):1.0f;
   float4 sColor1 = tex2D(samColor1,texCoord)-CS_YUYV_OFFSET;
   sColor1       = sign(sAlpha1)*sColor1*fBlendValues[1];  
   float4 t         = bCGBlended?sColor1*sign(sAlpha1):sColor1*sAlpha1;
   //自身 Alpha 考虑 CGBlend,全局 Alpha 不考虑 CGBlend,否则效果不对
   sAlpha1*=bAlphaValue[1];
   retColor.oAlpha  =  sAlpha0 + sAlpha1- sAlpha0 * sAlpha1;   
        
   float4 oColor    = 0.0f;  
	oColor=any(retColor.oAlpha)?sColor0*(1.0-bAlphaValue[1]*sAlpha1)+ t*bAlphaValue[1]:0.0;
   
   retColor.oColor  =  oColor+CS_YUYV_OFFSET;
   return retColor;  
}