sampler2D samColor0    :register(s0);
sampler2D samAlpha0    :register(s1);
sampler2D samColor1    :register(s2);
sampler2D samAlpha1    :register(s3);
float4  bAlphaExisted:register(c0);
float4  bAlphaValue  :register(c1);
float2  fBlendValues :register(c2);
struct P_OUT
{
   float4 oColor : COLOR0;//Color
   float4 oAlpha : COLOR1;//Alpha
};
#include "..\Shaders\ColorSpaceFunc.INC"

P_OUT main( float2 texCoord  : TEXCOORD0, float2 texCoord1  : TEXCOORD1 )
{
   const float4 cMode = CS_YUYV_OFFSET;  
   P_OUT retColor;   
   float4 sAlpha0 = bAlphaExisted[0]?tex2D(samAlpha0,texCoord)*bAlphaValue[0]:bAlphaValue[0];    
   float4 sColor0 = tex2D(samColor0,texCoord)-CS_YUYV_OFFSET;
   sColor0 *= sAlpha0.rrbr*fBlendValues[0];
   
   float4 sAlpha1 = bAlphaExisted[1]?tex2D(samAlpha1,texCoord)*bAlphaValue[1]:bAlphaValue[1];    
   float4 sColor1 = tex2D(samColor1,texCoord)-CS_YUYV_OFFSET;
   sColor1 = sAlpha1.rrbr*sColor1*fBlendValues[1];
   
   
   float4 rgba0_0,rgba0_1,rgba1_0,rgba1_1;
   
   ColorSpace_YUYVToRGBA( sColor0,sAlpha0,rgba1_0,rgba1_1);
   ColorSpace_YUYVToRGBA( sColor1,sAlpha1,rgba0_0,rgba0_1);      
      rgba1_0 = saturate(rgba1_0);
   rgba1_1 = saturate(rgba1_1);
   rgba0_0 = saturate(rgba0_0);
   rgba0_1 = saturate(rgba0_1);
   float4 rColor1,rColor2;      
   rColor1.rgb = min(rgba0_0.rgb, rgba1_0.rgb);
   rColor2.rgb = min(rgba0_1.rgb, rgba1_1.rgb);      
   rColor1.a   = rgba0_0.a + rgba1_0.a- rgba1_0.a * rgba0_0.a;   
   rColor2.a   = rgba0_1.a + rgba1_1.a- rgba0_1.a * rgba1_1.a;   
      
   ColorSpace_RGBAToYUYU_AAAA( rColor1, rColor2, retColor.oColor, retColor.oAlpha);
   
   retColor.oColor += cMode;
   
   return retColor;  
 }